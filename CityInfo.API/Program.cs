using CityInfo.API;
using CityInfo.API.DbContexts;
using CityInfo.API.Services;
using Microsoft.AspNetCore.StaticFiles;
using Microsoft.EntityFrameworkCore;
using Serilog;

// configuring serilog
Log.Logger = new LoggerConfiguration()
	.MinimumLevel.Debug()
	.WriteTo.Console()
	.WriteTo.File("logs/cityinfo.txt", rollingInterval: RollingInterval.Day)
	.CreateLogger();


var builder = WebApplication.CreateBuilder(args);
//builder.Logging.ClearProviders(); // removes the logger provided by default
//builder.Logging.AddConsole();
builder.Host.UseSerilog(); // using serilog for logging...


// Add services to the container.

//builder.Services.AddControllers(); // generated by template...

builder.Services.AddControllers(options =>
{
	options.ReturnHttpNotAcceptable = true; // reject xml format requests, because we are not formatting for it. returns 406 code.
}).AddNewtonsoftJson().
AddXmlDataContractSerializerFormatters(); // add the ability to respond with xml

// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

builder.Services.AddSingleton<FileExtensionContentTypeProvider>(); // to determine extensions of static files...

#if DEBUG
builder.Services.AddTransient<IMailService, LocalMailService>();
#else
builder.Services.AddTransient<IMailService, CloudMailService>();
#endif
builder.Services.AddSingleton<CitiesDataStore>();

builder.Services.AddDbContext<CityInfoContext>(dbContextOptions =>
{
	dbContextOptions.UseSqlite(builder.Configuration["ConnectionStrings:CityInfoDbConnectionString"]);
});

builder.Services.AddScoped<ICityInfoRepository, CityInfoRepository>(); // like others, injected through ctors in controllers.

builder.Services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());

builder.Services.AddProblemDetails();

//// adding problem details for error information
//builder.Services.AddProblemDetails(options =>
//{
//	options.CustomizeProblemDetails = ctx =>
//	{
//		ctx.ProblemDetails.Extensions.Add("additionalInfo", "additional info example");
//		ctx.ProblemDetails.Extensions.Add("server", Environment.MachineName);
//	};
//});

var app = builder.Build();

if (!app.Environment.IsDevelopment())
{
	app.UseExceptionHandler();
}

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
	app.UseSwagger();
	app.UseSwaggerUI();
}

app.UseHttpsRedirection();

app.UseRouting();

app.UseAuthorization();

app.UseEndpoints(endpoints =>
{
	endpoints.MapControllers();
}); // the warning wants you to just use app.MapControllers(); below... for tutorial we are using the old way, which is app.UseRouting(), and app.UseEndpoints(...)

//app.MapControllers();

app.Run();
